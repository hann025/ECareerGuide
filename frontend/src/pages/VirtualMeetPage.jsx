import React, { useEffect, useRef, useState, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import AgoraRTC from 'agora-rtc-sdk-ng';
import axios from 'axios';
import { Button, Space, Spin, Typography, message, Alert } from 'antd';
import {
    VideoCameraOutlined,
    VideoCameraAddOutlined,
    AudioMutedOutlined,
    AudioOutlined,
    PhoneOutlined,
    LoadingOutlined,
} from '@ant-design/icons';
import './VirtualMeetPage.css'; // Make sure this path is correct

const { Title, Text } = Typography;

// !! IMPORTANT: Your Agora App ID is directly inserted here !!
const APP_ID = '1c08db7d9936418899fc001688c077aa'; // Double-check this matches your Agora console and get_meeting_token.php

// Initialize Agora RTC client outside the component to persist across re-renders
const client = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' });

function VirtualMeetPage() {
    console.log("VirtualMeetPage component started."); // NEW: Debug log to confirm component rendering

    // We now expect 'meetingId' (database ID) from URL, which we'll use to fetch the Agora channel name
    const { meetingId } = useParams(); 
    const navigate = useNavigate();

    const [localAudioTrack, setLocalAudioTrack] = useState(null);
    const [localVideoTrack, setLocalVideoTrack] = useState(null);
    const [remoteUsers, setRemoteUsers] = useState([]); // Stores remote users and their tracks
    const [isJoined, setIsJoined] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // Refs for video player containers
    const localVideoPlayerRef = useRef(null);

    const fetchAgoraTokenAndJoin = useCallback(async () => {
        // Prevent multiple join attempts if already connecting or connected
        if (client.connectionState === 'CONNECTING' || client.connectionState === 'CONNECTED') {
            console.log("Agora client already connecting or connected. Aborting join attempt.");
            setIsLoading(false); 
            return;
        }

        setIsLoading(true);
        setError(null);

        if (!meetingId) {
            setError("Meeting ID is missing from the URL. Cannot join meeting.");
            setIsLoading(false);
            message.error("Meeting ID missing!");
            return;
        }

        try {
            console.log("VirtualMeetPage: Attempting to fetch token and join..."); // Debug: Before fetch
            const token = localStorage.getItem('token'); 
            if (!token) {
                throw new Error('User not authenticated. Please log in.');
            }

            // Step 1: Fetch meeting details to get the Agora channel name (meeting_link from DB)
            const meetingDetailsResponse = await axios.get(`http://localhost/AI-CAREER-PROJECT/backend/api/get_meeting_details.php?meeting_id=${meetingId}`, {
                headers: { Authorization: `Bearer ${token}` },
                withCredentials: true,
            });

            if (!meetingDetailsResponse.data.success || !meetingDetailsResponse.data.meeting_link) {
                throw new Error(meetingDetailsResponse.data.error || 'Failed to retrieve Agora channel name from backend.');
            }
            const channelName = meetingDetailsResponse.data.meeting_link; // This is the UUID generated by virtual_meet.php
            console.log("VirtualMeetPage: Fetched channel name:", channelName); // Debug: Show fetched channel name

            // Step 2: Fetch Agora Token from your backend using the channelName
            const agoraTokenResponse = await axios.get(`http://localhost/AI-CAREER-PROJECT/backend/api/get_meeting_token.php?channel_name=${channelName}`, {
                headers: { Authorization: `Bearer ${token}` },
                withCredentials: true,
            });

            if (agoraTokenResponse.data.success) {
                const agoraToken = agoraTokenResponse.data.token;
                const agoraUid = agoraTokenResponse.data.uid; 

                // Step 3: Join the Agora channel
                await client.join(APP_ID, channelName, agoraToken, agoraUid);
                console.log(`Joined Agora channel: ${channelName}, UID: ${agoraUid}`);
                setIsJoined(true);
                message.success('Joined virtual meeting successfully!');

                // Step 4: Create and publish local audio and video tracks
                const audioTrack = await AgoraRTC.createMicrophoneAudioTrack();
                const videoTrack = await AgoraRTC.createCameraVideoTrack();

                setLocalAudioTrack(audioTrack);
                setLocalVideoTrack(videoTrack);

                // Play local video in the designated ref container
                if (localVideoPlayerRef.current) {
                    videoTrack.play(localVideoPlayerRef.current);
                }

                await client.publish([audioTrack, videoTrack]);
            } else {
                throw new Error(agoraTokenResponse.data.error || 'Failed to get Agora token.');
            }
        } catch (err) {
            console.error('Failed to join Agora channel:', err);
            let errorMessage = 'An error occurred while joining the meeting.';
            if (err.response && err.response.data && err.response.data.error) {
                errorMessage = err.response.data.error;
            } else if (err.message.includes('token') || err.message.includes('Authentication error')) {
                errorMessage = 'Authentication error. Please ensure you are logged in. (Token expired/invalid)';
            } else if (err.message.includes('permission denied')) {
                errorMessage = 'Microphone/Camera access denied. Please grant permissions.';
            } else if (err.message.includes('NETWORK_TIMEOUT') || err.message.includes('dynamic key expired') || err.message.includes('CAN_NOT_GET_GATEWAY_SERVER')) {
                 errorMessage = 'Connection failed. Please check your network, firewall, or ensure your computer\'s time is synchronized. (Agora Error)';
            }
            setError(errorMessage);
            message.error(errorMessage);
            // If authentication or token issues, redirect to login
            if (errorMessage.includes('Authentication error') || errorMessage.includes('Access denied')) {
                navigate('/login'); 
            }
        } finally {
            if (client.connectionState !== 'CONNECTED') {
                setIsLoading(false);
            }
        }
    }, [meetingId, navigate]);

    useEffect(() => {
        console.log("VirtualMeetPage: useEffect triggered."); // Debug: Confirm useEffect is running

        // Agora client event listeners
        const handleUserPublished = async (user, mediaType) => {
            await client.subscribe(user, mediaType);
            
            setRemoteUsers((prevUsers) => {
                const existingUserIndex = prevUsers.findIndex(u => u.uid === user.uid);
                if (existingUserIndex > -1) {
                    const updatedUsers = [...prevUsers];
                    if (mediaType === 'video') updatedUsers[existingUserIndex].videoTrack = user.videoTrack;
                    if (mediaType === 'audio') updatedUsers[existingUserIndex].audioTrack = user.audioTrack;
                    return updatedUsers;
                } else {
                    return [...prevUsers, { uid: user.uid, videoTrack: user.videoTrack, audioTrack: user.audioTrack }];
                }
            });
            
            if (mediaType === 'video' && user.videoTrack) {
                const remoteVideoDiv = document.getElementById(`remote-video-player-${user.uid}`);
                if (remoteVideoDiv) {
                    user.videoTrack.play(remoteVideoDiv);
                } else {
                    console.warn(`Attempted to play video for user ${user.uid} but player div not found.`);
                }
            }
            if (mediaType === 'audio' && user.audioTrack) {
                user.audioTrack.play();
            }
        };

        const handleUserUnpublished = (user, mediaType) => {
            if (mediaType === 'video') {
                setRemoteUsers((prevUsers) =>
                    prevUsers.map((u) => (u.uid === user.uid ? { ...u, videoTrack: null } : u))
                );
            }
            if (mediaType === 'audio') {
                setRemoteUsers((prevUsers) =>
                    prevUsers.map((u) => (u.uid === user.uid ? { ...u, audioTrack: null } : u))
                );
            }
        };

        const handleUserJoined = (user) => {
            message.info(`Participant ${user.uid} joined.`);
        };

        const handleUserLeft = (user) => {
            message.info(`Participant ${user.uid} left.`);
            setRemoteUsers((prevUsers) => prevUsers.filter((u) => u.uid !== user.uid));
        };

        client.on('user-published', handleUserPublished);
        client.on('user-unpublished', handleUserUnpublished);
        client.on('user-joined', handleUserJoined);
        client.on('user-left', handleUserLeft);

        fetchAgoraTokenAndJoin(); 

        return () => {
            if (client.connectionState === 'CONNECTED' || client.connectionState === 'CONNECTING') {
                client.leave().then(() => {
                    console.log('Left Agora channel successfully.');
                }).catch(err => {
                    console.error('Failed to leave Agora channel gracefully:', err);
                });
            }

            localAudioTrack?.close();
            localVideoTrack?.close();

            setLocalAudioTrack(null);
            setLocalVideoTrack(null);
            setRemoteUsers([]);
            setIsJoined(false);
            setIsLoading(true); 

            client.off('user-published', handleUserPublished);
            client.off('user-unpublished', handleUserUnpublished);
            client.off('user-joined', handleUserJoined);
            client.off('user-left', handleUserLeft);
        };
    }, [fetchAgoraTokenAndJoin, localAudioTrack, localVideoTrack]); // Added local tracks to dependencies to ensure cleanup runs when they are set

    const handleToggleAudio = () => {
        if (localAudioTrack) {
            const isCurrentlyEnabled = localAudioTrack.enabled;
            localAudioTrack.setEnabled(!isCurrentlyEnabled);
            message.info(`Audio ${isCurrentlyEnabled ? 'muted' : 'unmuted'}.`);
        }
    };

    const handleToggleVideo = () => {
        if (localVideoTrack) {
            const isCurrentlyEnabled = localVideoTrack.enabled;
            localVideoTrack.setEnabled(!isCurrentlyEnabled);
            message.info(`Video ${isCurrentlyEnabled ? 'off' : 'on'}.`);
        }
    };

    const handleLeaveCall = async () => {
        try {
            if (isJoined && client.connectionState === 'CONNECTED') {
                await client.leave();
            }
            localAudioTrack?.close();
            localVideoTrack?.close();
            message.success('Successfully left the meeting.');
            navigate('/dashboard'); 
        } catch (err) {
            console.error('Error leaving call:', err);
            message.error('Failed to leave meeting gracefully.');
        }
    };

    if (isLoading) {
        return (
            <div className="virtual-meet-container loading-state">
                <Spin indicator={<LoadingOutlined style={{ fontSize: 48, color: '#a777e3' }} spin />} />
                <Text type="secondary" style={{ marginTop: 20, color: '#a777e3' }}>Joining virtual meeting...</Text>
            </div>
        );
    }

    if (error) {
        return (
            <div className="virtual-meet-container error-state">
                <Alert
                    message="Meeting Error"
                    description={error}
                    type="error"
                    showIcon
                    action={
                        <Button size="small" type="primary" onClick={() => navigate('/dashboard')} style={{ background: '#a777e3', borderColor: '#a777e3' }}>
                            Go to Dashboard
                        </Button>
                    }
                />
            </div>
        );
    }

    return (
        <div className="virtual-meet-container">
            <div className="bubbles-background"></div> 

            <div className="meeting-card">
                <div className="meeting-header">
                    <Title level={4} style={{ color: 'white', margin: 0 }}>Virtual Consultation</Title>
                    {/* Display the meeting ID from the URL for debugging/reference */}
                    <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: '14px' }}>Meeting ID: {meetingId}</Text>
                </div>

                <div className="video-streams-container">
                    {/* Local User's Video Stream (Picture-in-Picture style) */}
                    <div className="local-video-wrapper">
                        <div ref={localVideoPlayerRef} className="local-video-player">
                            {/* Local video track will be played here */}
                        </div>
                        {/* Overlays for local user video/audio status */}
                        {localVideoTrack && !localVideoTrack.enabled && (
                            <div className="video-overlay">
                                <VideoCameraOutlined style={{ fontSize: '32px' }} />
                                <Text style={{color: 'white'}}>Video Off</Text>
                            </div>
                        )}
                        {localAudioTrack && !localAudioTrack.enabled && (
                            <div className="audio-overlay">
                                <AudioMutedOutlined style={{ fontSize: '32px' }} />
                                <Text style={{color: 'white'}}>Audio Off</Text>
                            </div>
                        )}
                        <Text className="video-label">You</Text>
                    </div>

                    {/* Remote Users' Video Streams */}
                    <div className="remote-videos-grid">
                        {remoteUsers.length > 0 ? (
                            remoteUsers.map((user) => (
                                <div key={user.uid} className="remote-video-wrapper">
                                    <div
                                        id={`remote-video-player-${user.uid}`}
                                        className="remote-video-player"
                                    >
                                    </div>
                                    {/* Overlays for remote user video/audio status */}
                                    {!user.videoTrack || !user.videoTrack.enabled ? (
                                        <div className="video-overlay">
                                            <VideoCameraOutlined style={{ fontSize: '32px' }} />
                                            <Text style={{color: 'white'}}>Video Off</Text>
                                        </div>
                                    ) : null}
                                    {!user.audioTrack || !user.audioTrack.enabled ? (
                                        <div className="audio-overlay">
                                            <AudioMutedOutlined style={{ fontSize: '32px' }} />
                                            <Text style={{color: 'white'}}>Audio Off</Text>
                                        </div>
                                    ) : null}
                                    <Text className="video-label">Participant {user.uid}</Text>
                                </div>
                            ))
                        ) : (
                            <div className="no-remote-users-placeholder">
                                <Spin indicator={<LoadingOutlined style={{ fontSize: 32, color: '#a777e3' }} spin />} />
                                <Text style={{ color: '#888', marginTop: '10px' }}>Waiting for other participants...</Text>
                            </div>
                        )}
                    </div>
                </div>

                <div className="meeting-controls">
                    <Space size="middle">
                        <Button
                            type="primary"
                            shape="circle"
                            size="large"
                            icon={localAudioTrack?.enabled ? <AudioOutlined /> : <AudioMutedOutlined />}
                            onClick={handleToggleAudio}
                            className="control-button"
                        />
                        <Button
                            type="primary"
                            shape="circle"
                            size="large"
                            icon={localVideoTrack?.enabled ? <VideoCameraOutlined /> : <VideoCameraAddOutlined />}
                            onClick={handleToggleVideo}
                            className="control-button"
                        />
                        <Button
                            type="primary"
                            danger
                            shape="circle"
                            size="large"
                            icon={<PhoneOutlined rotate={135} />} 
                            onClick={handleLeaveCall}
                            className="end-call-button"
                        />
                    </Space>
                </div>
            </div>
        </div>
    );
}

export default VirtualMeetPage;
